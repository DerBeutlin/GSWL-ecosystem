#!/bin/bash

LEDGER_ECOSYSTEM_DIR=$(dirname "$0") # needed for later

# These variables are used in conjunction with the CSV files from the bank.
# When the latter are named consistently (ex:"apr2044_bank1.csv,
# may2044_bank1.csv") one can use simple aliases to always convert the latest
# CSV files. (Assuming monthly updates in this case.)
THIS_MONTH=$(date +'%b' | tr '[:upper:]' '[:lower:]') # "apr"
LAST_MONTH=$(date +'%b' -d 'last month' | tr '[:upper:]' '[:lower:]') # "apr"
THIS_YEAR=$(date +'%Y') # "2044"
LAST_YEAR=$(date +'%Y' -d 'last year') # "2044"
LAST_MONTHYEAR="${LAST_MONTH}${THIS_YEAR}"
if [[ "$LAST_MONTH" == "dec" ]]; then
    LAST_MONTHYEAR="${LAST_MONTH}${LAST_YEAR}"
fi

# This is the main command to invoke Ledger.
# --strict          : Abort if account, tag or commodity is unknown.
# --pedantic        : Warn if account, tag or commodity is unknown.
# --check-payees    : Warn/abort if payee is unknown.
# --explicit        : 
# --price-db FILE   : Specify the location of the price entry data file.
# --market          : Report last known market value.
# --wide            : Cause the default register report to assume a wide screen.
# --flat            : Do not shouw accounts in a hierarchical tree
# --pager=less"
LEDGERARGS="--pedantic --check-payees --price-db prices.txt --market"
alias led="ledger -f main.txt ${LEDGERARGS}"
alias ledp="ledger -f main.txt ${LEDGERARGS} --pager=less"
alias ledreports="${LEDGER_ECOSYSTEM_DIR}/reports.py"
alias ledlm='led -p "last month"'
alias ledplm='ledp -p "last month"'
# This is used for conversion of CSV files only
alias ledconv="${LEDGER_ECOSYSTEM_DIR}/convert.py"

function ledxact () {
    FILE=misc.tmp.txt
    #ledger xact 2004/4/9 viva food 11 tips 2.50
    X=$(led xact "$@")
    echo "$X"
    if [[ "$SHELL" =~ ^.*zsh$ ]]; then
        vared -p "Add to $FILE? [Y/n] " -c A
    elif [[ "$SHELL" =~ ^.*bash$ ]]; then
        read -e -p "Add to $FILE? [Y/n] " A
    fi
    if [[ -z "${A}" || "${A}" == "y" || "${A}" == "Y" ]]; then
        echo -e "\n$X" >> $FILE
        echo "Done."
    fi
}

function nMonthsAgo () {
    # helper method to get the name of month/year n months ago,
    # e.g. if today is mar 2042, it yields "Mar 2041"
    # todo return ?
    date +"%b %Y" -d "$1 months ago"
}


function ledbalper () {
    # ledbalper <CURRENCY> <ACCOUNTS> [<TOTAL>]
    # "ledger bal[ance] [per]centage"
    # Outputs the usual balance report with an additional percentage column.
    # The base value (100%, "total") for the calculations can be provided as an
    # optional argument. If multiple currencies are used, they must be
    # convertable. Ex:
    # ledbalper \$ "Income:Job Income:CapitalGains"
    # ledbalper \$ "Income:Job Income:CapitalGains" 1337.37
    CUR=$1
    ACCOUNTS=$2
    TOTAL=$3
    HINT="(set manually)"
    if [[ "$TOTAL" == "" ]]; then
        # Do not use double quotes here!
        TOTAL=$(led bal $ACCOUNTS -n -X $CUR --format "%(quantity(display_total))\n" | tail -n 1)
        HINT=""
    fi
    # Do not use double quotes here!
    led bal $ACCOUNTS --X $CUR --sort "T" --flat --format "%(ansify_if(justify(scrub(display_total), 20, 20 + int(prepend_width), true, color), bold if should_bold)) %(ansify_if(justify(scrub(percent(to_amount(display_total), $TOTAL)), 10, 10 + int(prepend_width), true, color), bold if should_bold)) %(!options.flat ? depth_spacer : \"\") %-(ansify_if(ansify_if(partial_account(options.flat), blue if color), bold if should_bold))\n%/%\$1 %\$2 $HINT\n%/%(prepend_width ? \" \" * int(prepend_width) : \"\")-------------------------------\n"
}

function listTmpFiles () {
    echo "meta.txt $(ls ./tmp/${LAST_MONTHYEAR}*.tmp) misc.tmp.txt" | tr '\n' ' '
}

function csvConvert () {
    ACCTOUNT=$1
    CSVFILE=$2
    BASENAME=$(basename "${CSVFILE}")
    TMPFILE=./tmp/${BASENAME}.tmp
    cp "${TMPFILE}" "${TMPFILE}.bak" 2>/dev/null
    ledconv "${ACCTOUNT}" "${CSVFILE}" | tee "${TMPFILE}" | less
}

# Source the file in the current working directory
source alias.local 2>/dev/null

# Once all CSV files are converted AND misc.tmp.txt contains manually added
# ledger journal entries, everything needs to be merged and appended to the
# actual journal.
ATMPFILE="./lmall.tmp.txt" # used to store all postings from all tmp text files
DTMPFILE="./lmsorted.tmp.txt" # used to store the same as above, but sorted by date
# This alias merges all tmp Ledger files, sorts them by date, and appends them
# to the main journal.txt:
#todo: include funzt nicht im subdir :/
alias lmmake="cat \$(listTmpFiles) > $ATMPFILE && ledger $LEDGERARGS -f $ATMPFILE --sort 'd' print > $DTMPFILE && git checkout journal.txt && (echo ' '; cat $DTMPFILE) >> journal.txt && less $DTMPFILE && rm $ATMPFILE $DTMPFILE"
alias lmclean="rm ./tmp/*"
